(function(angular){

    'use strict';

    <% var hasInitEvent = !!extension && events.initEventHandler %>
    <% var hasShowEvent = !!extension && events.showEventHandler; %>

    angular.module('views')
        .controller('<%= controller %>', ['$scope', '$injector'<% if (hasInitEvent) { %>, 'onInit'<% } %>,function ($scope, $injector<% if (hasInitEvent) { %>, onInit<% } %>) {
            $scope.factory = $injector.get('<%= extension %>');
            <% if (hasShowEvent) { %>
            $scope.$on('$viewContentLoaded', function(e) {
                $scope.factory['<%= events.showEventHandler %>'](e.currentScope<% if (hasInitEvent) { %>, onInit<% } %>);
            });
            <% } %>

            $scope._$ds = new kendo.data.DataSource(<%- dataSource %>);

            $scope._$ds
                .bind('sync', syncHandler)
                .bind('error', errorHandler)
                .bind('change', changeHandler)
                .bind('requestStart', requestStartHandler);

            $scope.model = <%- options %>;

            var requestType = '';

            $scope.validatorOptions = {
                errorTemplate: '<p class="input__required">#=message#</p>'
            };

            $scope.$on("kendoWidgetCreated", function (event, widget) {
                if (widget instanceof kendo.ui.Grid) {
                    widget.one('dataBound', dataBoundHandler);
                    widget.wrapper.on('click', '.k-grid-content tr[data-uid]', $scope.onChangeEvent);
                }
            });

            function restoreSelection() {
                var dataItem = $scope.grid.dataSource.get($scope.selectedId);
                if (dataItem) {
                    var row = angular.element("[data-uid='"+ dataItem.uid +"']");
                    if (row.length) {
                        $scope.grid.select(row);
                    } else {
                        $scope.grid.select('tr[data-uid]:eq(0)');
                    }
                } else {
                    $scope.grid.select('tr[data-uid]:eq(0)');
                }
            }

            function createSelection() {
                $scope.selected = kendo.proxyModelSetters($scope.grid.dataItem($scope.grid.select()));
                $scope.selectedId = $scope.selected.id;
            }

            function restoreState() {
                $scope.grid.cancelChanges();
                restoreSelection();
                createSelection();
            }

            function changeHandler(e) {
                if (e.action != 'add' && e.action != 'remove' && $scope.grid) {
                    $scope.$evalAsync(function() {
                        restoreSelection();
                        createSelection();
                    });
                }
            }

            function requestStartHandler(e) {
                requestType = e.type;
            }

            $scope.onChangeEvent = function (e) {
                $scope.$evalAsync(function() {
                    createSelection();
                });

                $scope['model'].events.onRowSelect({ sender: $scope.grid, fromView: true });
            }

            $scope.edit = function (e) {
                $scope.updateInProcess = true;
            }

            $scope.save = function (e) {
                if ($scope.validator.validate()) {
                    $scope.grid.saveChanges();
                }
            }

            $scope.cancel = function (e) {
                restoreState();
                $scope.updateInProcess = $scope.insertInProcess = false;
            }

            $scope.insert = function() {
                $scope.grid.dataSource.add({});
                var data = $scope.grid.dataSource.data();
                $scope.selected = kendo.proxyModelSetters(data[data.length - 1]);
                $scope.selectedId = null;
                $scope.insertInProcess = true;
                $scope.updateInProcess = false;
            }

            $scope.delete = function () {
                function removeRow() {
                    $scope.grid.removeRow($scope.grid.select().first());
                    $scope.grid.saveChanges();
                }

                if($scope['model'].confirmRemove) {
                    $scope.$emit('dialog', {
                        title: 'Are you sure you want to delete this record?',
                        hint: 'The record will be permanently removed.',
                        okButton: {
                            handler: removeRow
                        }
                    });
                } else {
                    removeRow();
                }
            }

            function dataBoundHandler(e) {
                $scope.$evalAsync(function() {
                    $scope.grid.select('tr[data-uid]:eq(0)');
                    $scope['model'].events.onRowSelect({ sender: $scope.grid, fromView: true });
                    createSelection();
                });
            }

            function syncHandler(e) {
                $scope.$evalAsync(function() {
                    restoreSelection();
                    createSelection();
                    $scope.updateInProcess = $scope.insertInProcess = false;
                });
            }

            function errorHandler(e) {
                var transport = e.sender.transport;
                var tableRef = transport.tableRef;
                var jsdo = transport.jsdo;
                var table = tableRef ? jsdo[tableRef] : jsdo;
                var errors = table.getErrors();
                var message = e.errorThrown.message;

                message += "<ul>";

                for (var i = 0; i < errors.length; i++) {
                    message += '<li>' + errors[i].error + '</li>';
                }

                message += "</ul>";

                $scope.$emit('notification', { type: 'error', message: message});
                
                if (!$scope.insertInProcess) {
                    if (requestType != 'update') {
                        restoreState();
                    }
                }
            }

            $scope.$on('$destroy', function (e) {
                 $scope._$ds
                    .unbind('sync', syncHandler)
                    .unbind('error', errorHandler)
                    .unbind('change', changeHandler)
                    .unbind('requestStart', requestStartHandler);

                $scope.grid.wrapper.off('click', $scope.onChangeEvent)
            });
        }]);
})(angular);
